/*
 * generated by Xtext 2.29.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getSINSTRUCTIONParserRuleCall_0());
			}
			lv_S_0_0=ruleINSTRUCTION
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"S",
					lv_S_0_0,
					"org.xtext.example.mydsl.MyDsl.INSTRUCTION");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleS
entryRuleS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSRule()); }
	iv_ruleS=ruleS
	{ $current=$iv_ruleS.current.getText(); }
	EOF;

// Rule S
ruleS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSAccess().getINSTRUCTIONParserRuleCall_0());
		}
		this_INSTRUCTION_0=ruleINSTRUCTION
		{
			$current.merge(this_INSTRUCTION_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSAccess().getLeftCurlyBracketKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getSAccess().getSParserRuleCall_1_1());
			}
			this_S_2=ruleS
			{
				$current.merge(this_S_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSAccess().getRightCurlyBracketKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleINSTRUCTION
entryRuleINSTRUCTION returns [String current=null]:
	{ newCompositeNode(grammarAccess.getINSTRUCTIONRule()); }
	iv_ruleINSTRUCTION=ruleINSTRUCTION
	{ $current=$iv_ruleINSTRUCTION.current.getText(); }
	EOF;

// Rule INSTRUCTION
ruleINSTRUCTION returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getDECLARATION_VARParserRuleCall_0());
		}
		this_DECLARATION_VAR_0=ruleDECLARATION_VAR
		{
			$current.merge(this_DECLARATION_VAR_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getAFFECTATION_VARParserRuleCall_1());
		}
		this_AFFECTATION_VAR_1=ruleAFFECTATION_VAR
		{
			$current.merge(this_AFFECTATION_VAR_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getDECLARATION_FONCTIONParserRuleCall_2());
		}
		this_DECLARATION_FONCTION_2=ruleDECLARATION_FONCTION
		{
			$current.merge(this_DECLARATION_FONCTION_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDECLARATION_VAR
entryRuleDECLARATION_VAR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDECLARATION_VARRule()); }
	iv_ruleDECLARATION_VAR=ruleDECLARATION_VAR
	{ $current=$iv_ruleDECLARATION_VAR.current.getText(); }
	EOF;

// Rule DECLARATION_VAR
ruleDECLARATION_VAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_VARIABLE_0=RULE_VARIABLE
		{
			$current.merge(this_VARIABLE_0);
		}
		{
			newLeafNode(this_VARIABLE_0, grammarAccess.getDECLARATION_VARAccess().getVARIABLETerminalRuleCall_0());
		}
		this_CHAINE_1=RULE_CHAINE
		{
			$current.merge(this_CHAINE_1);
		}
		{
			newLeafNode(this_CHAINE_1, grammarAccess.getDECLARATION_VARAccess().getCHAINETerminalRuleCall_1());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDECLARATION_VARAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleAFFECTATION_VAR
entryRuleAFFECTATION_VAR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAFFECTATION_VARRule()); }
	iv_ruleAFFECTATION_VAR=ruleAFFECTATION_VAR
	{ $current=$iv_ruleAFFECTATION_VAR.current.getText(); }
	EOF;

// Rule AFFECTATION_VAR
ruleAFFECTATION_VAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_CHAINE_0=RULE_CHAINE
		{
			$current.merge(this_CHAINE_0);
		}
		{
			newLeafNode(this_CHAINE_0, grammarAccess.getAFFECTATION_VARAccess().getCHAINETerminalRuleCall_0());
		}
		this_EGAL_1=RULE_EGAL
		{
			$current.merge(this_EGAL_1);
		}
		{
			newLeafNode(this_EGAL_1, grammarAccess.getAFFECTATION_VARAccess().getEGALTerminalRuleCall_1());
		}
		this_NOMBRE_2=RULE_NOMBRE
		{
			$current.merge(this_NOMBRE_2);
		}
		{
			newLeafNode(this_NOMBRE_2, grammarAccess.getAFFECTATION_VARAccess().getNOMBRETerminalRuleCall_2());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAFFECTATION_VARAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleDECLARATION_FONCTION
entryRuleDECLARATION_FONCTION returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDECLARATION_FONCTIONRule()); }
	iv_ruleDECLARATION_FONCTION=ruleDECLARATION_FONCTION
	{ $current=$iv_ruleDECLARATION_FONCTION.current.getText(); }
	EOF;

// Rule DECLARATION_FONCTION
ruleDECLARATION_FONCTION returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_FONCTION_0=RULE_FONCTION
		{
			$current.merge(this_FONCTION_0);
		}
		{
			newLeafNode(this_FONCTION_0, grammarAccess.getDECLARATION_FONCTIONAccess().getFONCTIONTerminalRuleCall_0());
		}
		this_CHAINE_1=RULE_CHAINE
		{
			$current.merge(this_CHAINE_1);
		}
		{
			newLeafNode(this_CHAINE_1, grammarAccess.getDECLARATION_FONCTIONAccess().getCHAINETerminalRuleCall_1());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDECLARATION_FONCTIONAccess().getLeftParenthesisKeyword_2());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDECLARATION_FONCTIONAccess().getRightParenthesisKeyword_3());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDECLARATION_FONCTIONAccess().getLeftCurlyBracketKeyword_4());
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDECLARATION_FONCTIONAccess().getRightCurlyBracketKeyword_5());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDECLARATION_FONCTIONAccess().getSemicolonKeyword_6());
		}
	)
;

RULE_VARIABLE : 'var';

RULE_EGAL : '=';

RULE_FONCTION : 'fonction';

RULE_CHAINE : ('a'..'z'|'A'..'Z')*;

RULE_NOMBRE : ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
